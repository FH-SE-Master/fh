using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using SelvesSoftware.DataContainer;
using Npgsql;
using SelvesSoftware.BusinessLogic;
using System.Windows;

namespace SelvesSoftware.DB
{
    public class PurchaserDataDAO: IPurchaserDataDAO
    {
        
       
        /// <summary>
        /// Auswahl der Auftraggeberdaten für einen bestimmten Auftraggeber in einem bestimmten Monat
        /// </summary>
        /// <param name="pur"></param>
        /// <returns></returns>
        /// 

        public PurchaserData Select(PurchaserData pur, bool plusPur)
        {
            if (plusPur)
            {
                (new PurchaserDAO()).Select(pur.Purchaser);
            }

            int month = System.DateTime.Now.Month;
            int year = System.DateTime.Now.Year;
            if (pur.Month != 0)
            {
                month = pur.Month;
            }
            else
            {
                pur.Month = month;
            }
            if (pur.Year != 0)
            {
                year = pur.Year;
            }
            else
            {
                pur.Year = year;
            }

            NpgsqlConnection con = DB.DBConnector.GetConnection();

             
            //letztes Monat dieses Jahres auswählen
            NpgsqlCommand commandF = new NpgsqlCommand(null, con);
            commandF.CommandText = "SELECT * FROM auftraggeberdaten WHERE agid=@id AND  monat <= @monat AND jahr = @jahr " +
                                   "ORDER BY monat DESC LIMIT 1";
            DB.DBConnector.AddToCommand("@id", NpgsqlTypes.NpgsqlDbType.Numeric, commandF, pur.Purchaser.Id);
            DB.DBConnector.AddToCommand("@monat", NpgsqlTypes.NpgsqlDbType.Numeric, commandF, month);
            DB.DBConnector.AddToCommand("@jahr", NpgsqlTypes.NpgsqlDbType.Numeric, commandF, year);
            //restlichen parameter
            //while(reader.

            NpgsqlDataReader reader = commandF.ExecuteReader();

            //solange keine Monate des Jahres gefunden wurden: ein Jahr vorher suchen
            month = 12;
            while (!reader.Read() && year >= 1988)
            {
                year--;
                //neues commando und parameter
                NpgsqlCommand commandF1 = new NpgsqlCommand(null, con);
                commandF1.CommandText = "SELECT * FROM auftraggeberdaten WHERE agid=@id AND  monat <= @monat AND jahr = @jahr " +
                                   "ORDER BY monat DESC LIMIT 1";
                DB.DBConnector.AddToCommand("@id", NpgsqlTypes.NpgsqlDbType.Numeric, commandF1, pur.Purchaser.Id);
                DB.DBConnector.AddToCommand("@month", NpgsqlTypes.NpgsqlDbType.Numeric, commandF1, month);
                DB.DBConnector.AddToCommand("@year", NpgsqlTypes.NpgsqlDbType.Numeric, commandF1, year);
                reader.Close();
                reader = commandF1.ExecuteReader();
            }

            //decimal month = 0;
            //decimal year = 0;

            //if (!(readerF.IsDBNull(0)))
            //{
            //    month = readerF.GetDecimal(0);
            //}
            //if (!(readerF.IsDBNull(1)))
            //{
            //    year = readerF.GetDecimal(1);
            //}

            
            //readerF.Close();

            //NpgsqlCommand command = new NpgsqlCommand(null, con);
            //command.CommandText = "SELECT * FROM Auftraggeberdaten p WHERE p.agid=@id AND p.monat=@month AND p.jahr=@year";

            //DB.DBConnector.AddToCommand("@id", NpgsqlTypes.NpgsqlDbType.Numeric, command, pur.Purchaser.Id);
            //DB.DBConnector.AddToCommand("@month", NpgsqlTypes.NpgsqlDbType.Numeric, command, pur.Month);
            //DB.DBConnector.AddToCommand("@year", NpgsqlTypes.NpgsqlDbType.Numeric, command, pur.Year);

            //NpgsqlDataReader reader = command.ExecuteReader();

            //reader.Read();
            if (reader.HasRows)
            {
                if (!(reader.IsDBNull(0)))
                {
                    pur.TravellingAllowanceKM = reader.GetDecimal(0);
                }
                if (!(reader.IsDBNull(1)))
                {
                    pur.HourlyRatePayoff = reader.GetDecimal(1);
                }
                if (!(reader.IsDBNull(2)))
                {
                    pur.HourlyRate = reader.GetDecimal(2);
                }
                if (!(reader.IsDBNull(3)))
                {
                    pur.InputIncome = reader.GetDecimal(3);
                }
                //if (!(reader.IsDBNull(4)))
                //{
                //    pur.Month = reader.GetInt32(4);
                //}
                //if (!(reader.IsDBNull(5)))
                //{
                //    pur.Year = reader.GetInt32(5);
                //}
                if (!(reader.IsDBNull(7)))
                {
                    pur.TravellingAllowance = reader.GetDecimal(7);
                }
                if (!(reader.IsDBNull(8)))
                {
                    pur.AssistenceDemand = reader.GetInt32(8);
                }
                if (!(reader.IsDBNull(9)))
                {
                    pur.CareAllowance = reader.GetInt32(9);
                }
                if (!(reader.IsDBNull(10)))
                {
                    pur.Income = reader.GetDecimal(10);
                }
            }
            reader.Close();

            con.Close();


            return pur;
        }



        public PurchaserData Select(PurchaserData pur)
        {
            return Select(pur, true);
        }
        public PurchaserData Insert(PurchaserData purData)
        {
            PurchaserDAO pdao = new PurchaserDAO();
            pdao.Insert(purData.Purchaser);

            NpgsqlConnection con = DB.DBConnector.GetConnection();

             
            NpgsqlCommand command = new NpgsqlCommand(null, con);
            command.CommandText = "INSERT INTO auftraggeberdaten (agid,monat,jahr, stundensatzauszahlung, " +
            "Stundensatz,BeitragEinkommen,FahrtkostenZusatz,BetreuungsbedarfH, EinkommenMonat, PflegegeldStufe, " +
            "FahrtkostenzusatzKM) VALUES (@agid,@month, @year, @stundensatzauszahlung, @Stundensatz, "+
            "@BeitragEinkommen,@FahrtkostenZusatz,@BetreuungsbedarfH, @EinkommenMonat, @PflegegeldStufe, @FahrtkostenzusatzKM )";


            DB.DBConnector.AddToCommand("@agid", NpgsqlTypes.NpgsqlDbType.Numeric, command, purData.Purchaser.Id);
            DB.DBConnector.AddToCommand("@month", NpgsqlTypes.NpgsqlDbType.Numeric, command, purData.Month);
            DB.DBConnector.AddToCommand("@year", NpgsqlTypes.NpgsqlDbType.Numeric, command, purData.Year);
            DB.DBConnector.AddToCommand("@stundensatzauszahlung", NpgsqlTypes.NpgsqlDbType.Numeric, command, purData.HourlyRatePayoff);
            DB.DBConnector.AddToCommand("@Stundensatz", NpgsqlTypes.NpgsqlDbType.Numeric, command, purData.HourlyRate);
            DB.DBConnector.AddToCommand("@BeitragEinkommen", NpgsqlTypes.NpgsqlDbType.Numeric, command, purData.InputIncome);
            DB.DBConnector.AddToCommand("@FahrtkostenZusatz", NpgsqlTypes.NpgsqlDbType.Numeric, command, purData.TravellingAllowance);
            DB.DBConnector.AddToCommand("@BetreuungsbedarfH", NpgsqlTypes.NpgsqlDbType.Numeric, command, purData.AssistenceDemand);
            DB.DBConnector.AddToCommand("@EinkommenMonat", NpgsqlTypes.NpgsqlDbType.Numeric, command, purData.Income);
            DB.DBConnector.AddToCommand("@PflegegeldStufe", NpgsqlTypes.NpgsqlDbType.Numeric, command, purData.CareAllowance);
            DB.DBConnector.AddToCommand("@FahrtkostenzusatzKM", NpgsqlTypes.NpgsqlDbType.Numeric, command, purData.TravellingAllowanceKM);


            try {command.ExecuteNonQuery();}catch(Exception e){MessageBox.Show(e.Message.ToString(),"Error");}
            con.Close();

            return purData;
        }

     
        public List<PurchaserData> SelectAll()
        {
            NpgsqlConnection con = DB.DBConnector.GetConnection();

             

            NpgsqlCommand command = new NpgsqlCommand(null, con);
            command.CommandText = "SELECT distinct agid FROM auftraggeberdaten";

            List<PurchaserData> pds = new List<PurchaserData>();

            try { NpgsqlDataReader reader = command.ExecuteReader();

                List<int> agids = new List<int>();
                while (reader.Read())
                {
                    agids.Add(reader.GetInt32(0));
                }

                //
                //while (reader.Read())
                //{
                //    PurchaserData pd = new PurchaserData();
                //    pd.Purchaser = new Purchaser();
                //    pd.Purchaser.Id = reader.GetInt32(0);
                //    pd.Month = Convert.ToInt32( reader.GetDecimal(1));
                //    pd.Year =  Convert.ToInt32(reader.GetDecimal(2));
                //    pds.Add(pd);
                //}
                reader.Close();
                con.Close();

                Purchaser currPurr = new Purchaser();
                currPurr.Id = -1;
                foreach (int agid in agids)
                {
                    PurchaserData pd = new PurchaserData();
                    pd.Purchaser = new Purchaser();
                    pd.Purchaser.Id = agid;
                    pd = Select(pd, true);
                    pds.Add(pd);
                }
            }catch(Exception e) { MessageBox.Show("Datenbankverbindung nicht möglich\n" + e.Message.ToString(), "Error"); }

            return pds;
        }


        public bool Update(PurchaserData p)
        {

            PurchaserDAO purDAO = new PurchaserDAO();
            purDAO.Update(p.Purchaser);

            NpgsqlConnection con = DB.DBConnector.GetConnection();

            NpgsqlCommand command = new NpgsqlCommand(null, con);
            command.CommandText = "UPDATE auftraggeberdaten SET "+ 
                "stundensatzauszahlung=@stundensatzauszahlung, Stundensatz=@Stundensatz, " +
                "BeitragEinkommen=@BeitragEinkommen,FahrtkostenZusatz=@FahrtkostenZusatz, "+
                "BetreuungsbedarfH=@BetreuungsbedarfH, EinkommenMonat=@EinkommenMonat, PflegegeldStufe=@PflegegeldStufe,"+
                "FahrtkostenzusatzKM=@FahrtkostenzusatzKM WHERE agid=@id AND monat=@month  AND jahr=@year";

            DB.DBConnector.AddToCommand("@id", NpgsqlTypes.NpgsqlDbType.Numeric, command, p.Purchaser.Id);
            DB.DBConnector.AddToCommand("@month", NpgsqlTypes.NpgsqlDbType.Numeric, command, p.Month);
            DB.DBConnector.AddToCommand("@year", NpgsqlTypes.NpgsqlDbType.Numeric, command, p.Year);
            DB.DBConnector.AddToCommand("@stundensatzauszahlung", NpgsqlTypes.NpgsqlDbType.Numeric, command, p.HourlyRatePayoff);
            DB.DBConnector.AddToCommand("@Stundensatz", NpgsqlTypes.NpgsqlDbType.Numeric, command, p.HourlyRate);
            DB.DBConnector.AddToCommand("@BeitragEinkommen", NpgsqlTypes.NpgsqlDbType.Numeric, command, p.InputIncome);
            DB.DBConnector.AddToCommand("@FahrtkostenZusatz", NpgsqlTypes.NpgsqlDbType.Numeric, command, p.TravellingAllowance);
            DB.DBConnector.AddToCommand("@BetreuungsbedarfH", NpgsqlTypes.NpgsqlDbType.Numeric, command, p.AssistenceDemand);
            DB.DBConnector.AddToCommand("@EinkommenMonat", NpgsqlTypes.NpgsqlDbType.Numeric, command, p.Income);
            DB.DBConnector.AddToCommand("@PflegegeldStufe", NpgsqlTypes.NpgsqlDbType.Numeric, command, p.CareAllowance);
            DB.DBConnector.AddToCommand("@FahrtkostenzusatzKM", NpgsqlTypes.NpgsqlDbType.Numeric, command, p.TravellingAllowanceKM);

            try {command.ExecuteNonQuery();}catch(Exception e){MessageBox.Show(e.Message.ToString(),"Error");}
            con.Close();
            return true;
        }
        
    }
}
